#encoding: latin-1

# libzzub
# Modular Tracker Library
# Copyright (C) 2006 The libzzub Development Team
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
# MA    02110-1301, USA.

VERSION = "0.3"

import os, glob, sys, time, platform
import distutils.sysconfig

posix = os.name == 'posix'
linux = sys.platform == 'linux2'
x86_64 = platform.machine() == 'x86_64'


######################################
#
# init environment and define options
#
######################################

def tools_converter(value):
    return value.split(',')

def bool_converter(value):
    value = value.lower()
    if value in ('true','enabled','on','yes','1'):
        return True
    elif value in ('false','disabled','off','no','0'):
        return False
    return bool(value)

def audioengine_converter(value):
    value = value.lower()
    if not value in ('portaudio'):
        print("invalid option for AUDIOENGINE:",value)
        Exit(1)
    return value

opts = Variables( 'options.conf', ARGUMENTS )
opts.Add("PREFIX", 'Set the install "prefix" ( /path/to/PREFIX )', "/usr/local")
opts.Add("LIBDIR", 'Set the install "libdir", will be concatenated to PREFIX', "/lib") 
opts.Add("DESTDIR", 'Set the root directory to install into ( /path/to/DESTDIR )', "")
opts.Add("USE_SIGNATURE", 'Use signature to bond plugins and host (strongly recommended)', True, None, bool_converter)
opts.Add("SNDFILE", 'Support loading of waves via libsndfile', True, None, bool_converter)
opts.Add("DEBUG", "Compile everything in debug mode if true", False, None, bool_converter)
opts.Add("ZZUB_MODULE", "Compile module loading plugin (experimental)", False, None, bool_converter)
opts.Add("ZZUB_STREAM", "Compile stream plugins", True, None, bool_converter)
opts.Add("REVISION", 'Revision number (will be set automatically)', '0')
opts.Add("SIGNATURE", 'Host signature (will be set automatically)', '')
opts.Add("CONFIGURED", 'Version for which the build is configured (will be set automatically)', '')
opts.Add("TOOLS", 'Compiler suite to use', 'default', None, tools_converter)
opts.Add("LLVMGCCPATH", 'Path to llvm-gcc', '')
opts.Add("SSE", "Support SSE instructions", False, None, bool_converter)
opts.Add("SSE2", "Support SSE2 instructions", False, None, bool_converter)
opts.Add("LADSPA", "Support LADSPA plugins", False, None, bool_converter)
opts.Add("DSSI", "Support DSSI plugins", False, None, bool_converter)
opts.Add("JOBS", "Number of threads to compile with", '2') 
opts.Add("PYZZUB", "Support pyzzub", True, None, bool_converter)
opts.Add("GTK2", "Support GTK2 GUIs", False, None, bool_converter)
opts.Add("MAD", "Support libmad encoder", False, None, bool_converter)

env = Environment(ENV = os.environ, options = opts)

def get_revision():
    # if this is a repository, take the string from hg
    hgpath = env.WhereIs('hg', os.environ['PATH'])
    if os.path.isdir('.hg') and (hgpath != None):
        rev = os.popen('hg id -ni').readline().strip()
        if rev != "" and rev != "exported":
            revid, revn = rev.split(' ')
            return '%s:%s' % (revn, revid)
    # its a release build, take the string from a special file
    if os.path.isfile('REVISION'):
        with open('REVISION') as file:
            rev = file.readline().strip()
            if rev != "" and rev != "exported":
                return rev
    return env['REVISION']

revision = get_revision()
with open('REVISION','w') as file:
    print(revision, file=file)
env['REVISION'] = revision

env.SConsignFile()

######################################
#
# build settings
#
######################################


env['ROOTPATH'] = os.getcwd()

env.Append(CCFLAGS=['-D__SCONS__'])
env.Append(LIBPATH=['${ROOTPATH}/lib'])

SetOption('num_jobs', env['JOBS'].replace('-j', '')) 

env.Append(CCFLAGS=[
        '-DPOSIX',
        ])
env.Append(LINKFLAGS=[
        '-Wl,-rpath=%s' % str(env.Dir('${PREFIX}${LIBDIR}')),
        ])
if os.uname()[0] == 'FreeBSD':
    env.Append(CCFLAGS=[ '-I/usr/local/include' ])
    env.Append(LINKFLAGS=[ '-L/usr/local/lib' ])
    env['LIB_DL'] = env['LIB_RT'] = ''
    env['LIB_COMPAT'] = 'compat'
else:
    env['LIB_DL'] = 'dl'
    env['LIB_RT'] = 'rt'
    env['LIB_COMPAT'] = ''

gcc = env['CC'] == 'gcc'

if gcc:
    #env['CXXFLAGS'] += ['--no-rtti']
    env.Append(CCFLAGS=['-std=gnu++98',])
    if env['DEBUG'] == False:
        env.Append(CCFLAGS=[
                '-Wall',
                '-Wfatal-errors',
                #'-O1',  O2 O3 break infector and a few others
                '-O2',
                '-fno-strict-aliasing',
                '-ffast-math',
                '-fomit-frame-pointer',
                '-funroll-loops',
                '-DNDEBUG',
        ])
        env.Append(CCFLAGS=ARGUMENTS.get('CCFLAGS')) 
    else:
        env.Append(CCFLAGS=[
                '-g',
                '-DDEBUG',
                '-D_DEBUG',
        ])
    if env['SSE2'] == True:
        if not x86_64:
            env.Append(CCFLAGS=[
                    '-march=i686', 
            ])
        env.Append(CCFLAGS=[
                '-mfpmath=sse',
                '-msse2',
        ])
    elif env['SSE'] == True:
        if not x86_64:
            env.Append(CCFLAGS=[
                    '-march=i686',
            ])
        env.Append(CCFLAGS=[
                '-mfpmath=sse',
                '-msse',
        ])

######################################
# 64-bit fixes
######################################

import platform

if x86_64:
    picLibBuilder = Builder(action = Action('$ARCOM'),
                            emitter = '$LIBEMITTER',
                            prefix = '$LIBPREFIX',
                            suffix = '$LIBSUFFIX',
                            src_suffix = '$OBJSUFFIX',
                            src_builder = 'SharedObject')
    env['BUILDERS']['StaticLibrary'] = picLibBuilder
    env['BUILDERS']['Library'] = picLibBuilder
    env.Append(CCFLAGS=[
            '-D__X86_64__'
            ])

######################################
#
# signature
#
######################################

import stat
import socket


env['LIBZZUB_VERSION'] = VERSION
env['SIGNATURE'] = SIGNATURE = 'libzzub %s r%s %s-%s %s' % (env['LIBZZUB_VERSION'],env['REVISION'],env['CC'],sys.platform,socket.gethostname())

######################################
#
# install paths
#
######################################

try:
    umask = os.umask(0o022)
    #print 'setting umask to 0o022 (was 0%o)' % umask
except OSError:         # ignore on systems that don't support umask
    pass

import SCons
from SCons.Script.SConscript import SConsEnvironment
SConsEnvironment.Chmod = SCons.Action.ActionFactory(os.chmod,
                lambda dest, mode: 'Chmod: "%s" with 0%o' % (dest, mode))
def ldconfig(dir):
    # execute only if installing into root
    if not str(env['DESTDIR']):
        os.system('ldconfig %s' % dir)
SConsEnvironment.LdConfig = SCons.Action.ActionFactory(ldconfig, lambda dir: 'LdConfig: "%s"' % dir)

def InstallPerm(env, dir, source, perm):
    obj = env.Install(dir, source)
    for i in obj:
        env.AddPostAction(i, env.Chmod(str(i), perm))
    return dir

SConsEnvironment.InstallPerm = InstallPerm

rootpath = "${DESTDIR}${PREFIX}"
binpath = "${DESTDIR}${PREFIX}/bin"
libpath = "${DESTDIR}${PREFIX}${LIBDIR}"
includepath = "${DESTDIR}${PREFIX}/include"
pluginpath = "${DESTDIR}${PREFIX}${LIBDIR}/zzub"
pypath = "%s%s" % (env['DESTDIR'], env['PREFIX'])
pyextpath = distutils.sysconfig.get_python_lib(prefix=pypath)

def install(target, source, perm=None, symlink=False):
    if not perm:
        return env.Install(dir=target, source=source)
    else:
        return env.InstallPerm(dir=target, source=source, perm=perm)

env.Alias(target='install', source=rootpath)
env.Alias(target='install', source=pyextpath)

def install_root(source):
    return install(rootpath, source)

def install_lib(source):
    result = install(libpath, source)
    if posix and (not env['DESTDIR']):
        env.AddPostAction(result, env.LdConfig(libpath))
    return result
def install_python_extension(name,files):
    return install(pyextpath + "/"+name, files)
def install_bin(source):
    return install(binpath, source)
def install_plugin(source):
    return install(pluginpath, source)
def install_plugin_help(name, files):
    return install("${DESTDIR}${PREFIX}/share/doc/zzub/plugins/"+name, files, 0o0644)

env['PORTMIDI_SRC_PATH'] = '${ROOTPATH}/src/portmidi'
env['LIBZZUB_SRC_PATH'] = '${ROOTPATH}/src/libzzub'
env['MINIZIP_SRC_PATH'] = '${ROOTPATH}/src/minizip'
env['PLUGINS_SRC_PATH'] = '${ROOTPATH}/src/plugins'
env['PYZZUB_SRC_PATH'] = '${ROOTPATH}/src/pyzzub'
env['LANTERNFISH_SRC_PATH'] = '${ROOTPATH}/src/lanternfish'

env['LIB_BUILD_PATH'] = '${ROOTPATH}/lib'
env['BIN_BUILD_PATH'] = '${ROOTPATH}/bin'

######################################
#
# configure
#
######################################

env.Append(CPPPATH=['${ROOTPATH}/include'])

######################################
#
# configuration
#
######################################

USE_SNDFILE = env['SNDFILE']

def check_has_executable(conf, name):
    conf.Message("Checking for %s in PATH... " % name)
    for path in os.environ['PATH'].split(os.pathsep):
        fullpath = os.path.join(path,name)
        if os.path.isfile(fullpath):
            conf.Result(fullpath)
            return fullpath
    conf.Result("missing")
    return None

def check_command_is_version(conf, command, version):
    conf.Message("Checking for version of '%s'... " % command)
    ver = os.popen(command).read().strip()
    if ver[:len(version)] == version:
        conf.Result(ver)
        return ver
    conf.Result(ver)
    return None

def check_cpu_flag(conf, flag):
    conf.Message("Checking for '%s' CPU flag... " % flag)
    if linux:
        with open('/proc/cpuinfo','r') as file:
            for line in file:
                if ':' in line:
                    v = line.index(':')
                    key,value = line[:v],line[v+1:]
                    key = key.strip()
                    value = value.strip()
                    if key == 'flags':
                        if flag in value.split(' '):
                            conf.Result("yes")
                            return True
        conf.Result('no')
        return False
    # XXX: add cpu flag check for other platforms
    conf.Result('ERROR: not supported for this platform.')
    return False

def check_pkg_config(context, version):
    context.Message( 'Checking for pkg-config... ' )
    ret = context.TryAction('pkg-config --atleast-pkgconfig-version=%s' % version)[0]
    context.Result( ret )
    return ret

def check_pkg(context, name):
    context.Message( 'Checking for %s... ' % name )
    ret = context.TryAction('pkg-config --exists \'%s\'' % name)[0]
    context.Result( ret )
    return ret

def check_pkg_version(context, name, version):
    context.Message("Checking to see if %s is at least version %s... " % (name, version))
    ret = context.TryAction("pkg-config --atleast-version='%s' '%s'" % (version, name))[0]
    context.Result(ret)
    return ret

def is_cleaning():
    import SCons.Script.Main 
    try: return SCons.Script.Main.GetOption('clean')
    except: return SCons.Script.Main.options.clean

if (not is_cleaning()) and ('configure' in COMMAND_LINE_TARGETS):
    import os

    env['CONFIGURED'] = ''
    yesno = {True:'yes', False:'no'}
    conf = Configure(env,
            custom_tests = {
                    'HasExecutable' : check_has_executable,
                    'CommandIsVersion' : check_command_is_version,
                    'CheckCPUFlag' : check_cpu_flag,
            'CheckPKGConfig' : check_pkg_config,
            'CheckPKG' : check_pkg,
            'CheckPKGVersion' : check_pkg_version,
            }
    )
    if not conf.CheckCHeader('zlib.h'):
        print("Error: no zlib development files seem to be installed.")
        print("zlib libraries and headers are required for building.")
        Exit(1)
    if not conf.CheckCHeader('sndfile.h'):
        print("Error: no libsndfile development files seem to be installed.")
        print("libsndfile libraries and headers are required for building.")
        Exit(1)
    if not conf.CheckCHeader('samplerate.h'):
        print("Error: no libsamplerate (libsrc) development files seem to be installed.")
        print("libsamplerate (libsrc) libraries and headers are required for building.")
        Exit(1)
    if not conf.CheckCHeader('fftw3.h'):
        print("Error: no libfftw3 development files seem to be installed.")
        print("libfftw3 libraries and headers are required for building.")
        Exit(1)
    if not conf.CheckCHeader('mpg123.h'):
        print("Error: no mpg123 development files seem to be installed.")
        print("libmpg123 libraries and headers are required for building.")
        Exit(1)        
    boostgraphheaders = [
        'boost/graph/adjacency_list.hpp',
        'boost/graph/visitors.hpp',
        'boost/graph/depth_first_search.hpp',
        ]
    for header in boostgraphheaders:
        if not conf.CheckCXXHeader(header):
            print("Error: no libboost-graph development files seem to be installed.")
            print("libboost-graph libraries and headers are required for building.")
            Exit(1)
    if conf.CheckCHeader('ladspa.h'):
        env['LADSPA'] = True
    if conf.CheckCHeader('dssi.h') and conf.CheckCHeader('lo/lo.h'):
        env['DSSI'] = True
    else:
        env['DSSI'] = False
    if not conf.CheckCHeader('FLAC/all.h'):
        print("Error: no FLAC library development files found.")
        Exit(1)
    if not conf.CheckCHeader('mad.h'):
        env['MAD'] = False
    else:
        env['MAD'] = True
    if not conf.CheckCHeader('portaudio.h'):
        print("Error: portaudio is not available on your system.")
        Exit(1)
    if not conf.HasExecutable('xmlto'):
        print("Error: xmlto is not available on your system.")
        Exit(1)

    if conf.CheckCPUFlag('sse'):
        env['SSE'] = True
    if conf.CheckCPUFlag('sse2'):
        env['SSE'] = False
        env['SSE2'] = True

    if not conf.CheckPKGConfig('0.15.0'):
        print('pkg-config >= 0.15.0 not found.')
        Exit(1)

    if conf.CheckPKG('gtk+-2.0'):
        env['GTK2'] = True
    else:
        env['GTK2'] = False

    if not conf.CheckPKGVersion('portaudio-2.0', '19'):
        print('Error: need at least portaudio 19.')
        Exit(1)

    print("Finished configuration.")
    print()
    print("=== Using ===".center(50))
    print("GTK2:".rjust(30), yesno[env['GTK2'] == True])
    print("MAD:".rjust(30), yesno[env['MAD'] == True])
    print("Use SSE CPU Extension:".rjust(30),yesno[env['SSE'] == True])
    print("Use SSE2 CPU Extension:".rjust(30),yesno[env['SSE2'] == True])
    print()
    print("=== Components ===".center(50))
    print("DSSI:".rjust(30),yesno[env['DSSI'] == True])
    print("LADSPA:".rjust(30),yesno[env['LADSPA'] == True])
    print("pyzzub (zubb for Python):".rjust(30),yesno[env['PYZZUB'] == True])
    print()
    print("=== Directories ===".center(50))
    print("Prefix:".rjust(30),env['PREFIX'])
    print("Install into:".rjust(30),env.Dir("${DESTDIR}${PREFIX}"))
    print("Library Directory:".rjust(30),env.Dir("${PREFIX}${LIBDIR}"))
    print()
    print("Generate Debug Info:".rjust(30),env['DEBUG'])

    env = conf.Finish()
    env['CONFIGURED'] = VERSION
    opts.Save('options.conf', env)
    print()
    print("Please check if above settings reflect what you want, then build libzzub using")
    print("\tscons")
    print("To install scons, run")
    print("\t[sudo] scons install")
    Exit(0)

######################################
# save config
######################################

opts.Save('options.conf', env)
Help( opts.GenerateHelpText( env ) )

if (not is_cleaning()) and (env['CONFIGURED'] != VERSION):
    print("libzzub is not configured for version %s yet." % VERSION)
    print()
    print("Please run 'scons configure' to configure libzzub.")
    Exit(1)


#######################################
#
# custom builders
#
#######################################

copyright_notice = """
// libzzub signature header
// Copyright (C) 2006 The libzzub Development Team
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
// MA    02110-1301, USA.
"""

def build_signature(target, source, env):
    outfilepath = str(target[0])
    optionsconfpath = str(source[0])

    with open(optionsconfpath,"r") as file:
        exec (file.read())

    with open(outfilepath,"w") as ofile:
        print(copyright_notice, file=ofile)
        print("// generated by scons, do not touch", file=ofile)
        print("const char ZZUB_SIGNATURE[] = \"%s\";" % SIGNATURE, file=ofile)

def build_buildconfig(target, source, env):
    outfilepath = str(target[0])
    optionsconfpath = str(source[0])

    REVISION = '??'
    LIBDIR = "/lib"

    with open(optionsconfpath,"r") as file:
        exec (file.read())

    ext = os.path.splitext(os.path.basename(outfilepath))[1].lower()
    if ext == '.py':
        with open(outfilepath,"w") as ofile:
            print("# generated by scons, do not touch", file=ofile)
            print("REVISION = %r" % REVISION, file=ofile)
            print("LIBDIR = %r" % LIBDIR, file=ofile)
            print("SIGNATURE = %r" % SIGNATURE, file=ofile)
    elif ext in ('.cpp','.c','.h','.hh'):
        with open(outfilepath,"w") as ofile:
            print("// generated by scons, do not touch", file=ofile)
            print('#define ZZUB_REVISION "%s"' % REVISION, file=ofile)
            print('#define ZZUB_LIBDIR "%s"' % LIBDIR, file=ofile)
            print('#define ZZUB_SIGNATURE "%s"' % SIGNATURE, file=ofile)
            print('#define ZZUB_LIB_DIR_PATH "%s"' % str(env.Dir("${DESTDIR}${PREFIX}${LIBDIR}/zzub")), file=ofile)
            print('#define ZZUB_SHARE_DIR_PATH "%s"' % str(env.Dir("${DESTDIR}${PREFIX}/share/zzub")), file=ofile)

def build_python_extension(target, source, env):
    pass

PYTHON = "python3"

builders = dict(
        BuildConfig = Builder(action = build_buildconfig),
        Signature = Builder(action = build_signature),
        PyExtension = Builder(action = build_python_extension),
        ZIDLCHeader = Builder(action = PYTHON + ' ${ROOTPATH}/tools/zidl --c-header $TARGET $SOURCE'),
        ZIDLCDef = Builder(action = PYTHON + ' ${ROOTPATH}/tools/zidl --c-def $TARGET $SOURCE'),
        ZIDLPyCtypes = Builder(action = PYTHON + ' ${ROOTPATH}/tools/zidl --libversion $LIBZZUB_VERSION --py-ctypes $TARGET $SOURCE'),
)

env['BUILDERS'].update(builders)

#######################################
#
# zidl
#
#######################################

output = []
output.append(env.ZIDLCHeader('${ROOTPATH}/include/zzub/zzub.h', '${ROOTPATH}/include/zzub/zzub.zidl'))
output.append(env.ZIDLCDef('${LIBZZUB_SRC_PATH}/libzzub.def', '${ROOTPATH}/include/zzub/zzub.zidl'))
output.append(env.ZIDLPyCtypes('${PYZZUB_SRC_PATH}/zzub/__init__.py', '${ROOTPATH}/include/zzub/zzub.zidl'))

# make targets dependent from script
env.Depends(output, '${ROOTPATH}/tools/zidl')

#######################################
#
# SConscripts
#
#######################################

Export(
        'install_lib',
        'install_plugin',
        'install_bin',
        'install',
        'install_root',
        'install_plugin_help',
        'install_python_extension',
        'gcc',
        'posix',
        'env',
)

# generate signature
env.Signature(target='include/zzub/signature.h',source='options.conf')

env.SConscript('${LANTERNFISH_SRC_PATH}/SConscript')
env.SConscript('${LIBZZUB_SRC_PATH}/SConscript')
env.SConscript('${PLUGINS_SRC_PATH}/SConscript')
env.SConscript('${PYZZUB_SRC_PATH}/SConscript')

#######################################
#
# Rest
#
#######################################

# install zzub plugin and type headers
install(includepath+'/zzub', 'include/zzub/plugin.h')
install(includepath+'/zzub', 'include/zzub/types.h')
install(includepath+'/zzub', 'include/zzub/zzub.h')
install(includepath+'/zzub', 'include/zzub/signature.h')
